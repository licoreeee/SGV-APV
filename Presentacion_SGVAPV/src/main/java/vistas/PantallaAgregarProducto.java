package vistas;

import dtos.ProductoDTO;
import dtos.ProductoVentaDTO;
import dtos.VentaDTO;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.itson.subsistemaventas_sgvapv.ISubsistemaVentasFacade;
import org.itson.subsistemaventas_sgvapv.SubsistemaVentasFacade;

/**
 *
 * @author Dell
 */
public class PantallaAgregarProducto extends javax.swing.JFrame {

    private String tipoVenta;
    private VentaDTO venta;
    private ISubsistemaVentasFacade subsistemaVentasFacade = new SubsistemaVentasFacade();
    private PantallaVenta pantallaVenta;

    /**
     * Creates new form PantallaInicioSesion
     */
    public PantallaAgregarProducto(PantallaVenta pantallaVenta, VentaDTO venta, String tipoVenta) {
        initComponents();
        setEnabled(true);
        this.setTitle("SGVAPV - Agregar Producto");
        this.pantallaVenta = pantallaVenta;
        this.venta = venta;

        this.tipoVenta = tipoVenta;
        if (this.lblTipoVenta != null) {
            this.lblTipoVenta.setText(this.tipoVenta);
        }

        txtStock.setEditable(false);
        verificarTipoVenta();

        cargarProductos();
        txtCantidad.setEditable(false);
        setVisible(true);
    }

    private void cargarProductos() {
        List<ProductoDTO> productos = new ArrayList<>();
        if (tipoVenta.equalsIgnoreCase("PRODUCTO VARIADO")) {
            productos = subsistemaVentasFacade.obtenerProductosPorTipo(List.of("VARIADO"));
        } else if (tipoVenta.equalsIgnoreCase("AGUA PURIFICADA")) {
            productos = subsistemaVentasFacade.obtenerProductosPorTipo(List.of("LLENADO", "CONTENEDOR"));
        }

        if (productos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se han encontrado productos para este tipo de venta o no hay stock.", 
                    "Sin Productos", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            pantallaVenta.setVisible(true);
        } else {
            DefaultComboBoxModel<Object> modelo = new DefaultComboBoxModel<>();
            modelo.addElement("-- Seleccionar");
            for (ProductoDTO producto : productos) {
                modelo.addElement(producto);
            }
            cmbxProductos.setModel(modelo);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        txtStock = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblTipoVenta = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbxProductos = new javax.swing.JComboBox<>();
        txtCantidad = new javax.swing.JTextField();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(196, 216, 255));
        setEnabled(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(41, 136, 194));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Afacad", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SISTEMA GENERAL DE VENTAS");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo Agua Purificada del Valle.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addContainerGap(110, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(14, 14, 14))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 70));

        jPanel2.setBackground(new java.awt.Color(196, 216, 255));
        jPanel2.setLayout(null);

        jLabel4.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel4.setText("PRODUCTO");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(123, 133, 117, 31);

        jLabel5.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel5.setText("STOCK");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(165, 206, 69, 31);

        btnAgregar.setBackground(new java.awt.Color(41, 136, 194));
        btnAgregar.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        btnAgregar.setText("AGREGAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel2.add(btnAgregar);
        btnAgregar.setBounds(476, 344, 125, 38);

        txtStock.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        txtStock.setFocusable(false);
        jPanel2.add(txtStock);
        txtStock.setBounds(258, 206, 324, 33);

        jLabel3.setFont(new java.awt.Font("Afacad", 1, 30)); // NOI18N
        jLabel3.setText("BUSCAR PRODUCTO");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(231, 18, 263, 40);

        lblTipoVenta.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        lblTipoVenta.setText("AGUA PURIFICADA");
        jPanel2.add(lblTipoVenta);
        lblTipoVenta.setBounds(283, 64, 157, 27);

        jLabel6.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel6.setText("CANTIDAD");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(125, 267, 109, 31);

        cmbxProductos.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        cmbxProductos.setSelectedItem("--Seleccionar");
        cmbxProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxProductosActionPerformed(evt);
            }
        });
        jPanel2.add(cmbxProductos);
        cmbxProductos.setBounds(258, 133, 324, 33);

        txtCantidad.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
        });
        jPanel2.add(txtCantidad);
        txtCantidad.setBounds(258, 267, 324, 33);

        btnCancelar.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel2.add(btnCancelar);
        btnCancelar.setBounds(92, 344, 138, 38);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 720, 420));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        if (cmbxProductos.getSelectedItem() instanceof ProductoDTO) {
            ProductoDTO productoSeleccionado = (ProductoDTO) cmbxProductos.getSelectedItem();

            if (txtCantidad.getText().isBlank()) {
                JOptionPane.showMessageDialog(this, "Asegúrese de ingresar una cantidad.",
                        "Cantidad Vacía", JOptionPane.WARNING_MESSAGE);
                txtCantidad.requestFocus();
                return;
            }

            if (!txtCantidad.getText().matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Ingrese una cantidad numérica válida.",
                        "Cantidad Inválida", JOptionPane.ERROR_MESSAGE);
                txtCantidad.requestFocus();
                return;
            }

            int cantidadIngresada;
            try {
                cantidadIngresada = Integer.parseInt(txtCantidad.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Ingrese una cantidad numérica válida (número demasiado grande).",
                        "Cantidad Inválida", JOptionPane.ERROR_MESSAGE);
                txtCantidad.requestFocus();
                return;
            }

            if (cantidadIngresada <= 0) {
                JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor que cero.",
                        "Cantidad Inválida", JOptionPane.ERROR_MESSAGE);
                txtCantidad.requestFocus();
                return;
            }

            ProductoVentaDTO productoVenta = new ProductoVentaDTO(productoSeleccionado.getPrecio(), cantidadIngresada, productoSeleccionado);

            if (validarCantidad(venta, productoVenta)) {
                venta.agregarProducto(productoVenta);
                venta.actualizarTotal();
                pantallaVenta.cargarProducto(productoVenta);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "La cantidad ingresada sobrepasa el stock disponible.",
                        "Cantidad Inválida", JOptionPane.ERROR_MESSAGE);
                txtCantidad.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Asegúrese de seleccionar un producto válido.",
                    "Producto no Válido", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        pantallaVenta.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private boolean validarCantidad(VentaDTO venta, ProductoVentaDTO productoVentaNuevo) {
        Integer stockDelProductoNuevo = productoVentaNuevo.getProducto().getCantidad();

        if (stockDelProductoNuevo != null) {
            if (productoVentaNuevo.getCantidad() > stockDelProductoNuevo) {
                return false;
            }
        }

        for (ProductoVentaDTO productoYaEnVenta : venta.getProductos()) {
            if (productoYaEnVenta.getProducto().getCodigo().equalsIgnoreCase(productoVentaNuevo.getProducto().getCodigo())) {
                int cantidadYaEnVenta = productoYaEnVenta.getCantidad();
                int cantidadTotalProyectada = cantidadYaEnVenta + productoVentaNuevo.getCantidad();

                Integer stockDelProductoEnLista = productoYaEnVenta.getProducto().getCantidad();

                if (stockDelProductoEnLista != null) {
                    if (cantidadTotalProyectada > stockDelProductoEnLista) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    private void verificarTipoVenta() {
        if (this.getTipoVenta().equalsIgnoreCase("AGUA PURIFICADA")) {
            jLabel5.setVisible(false);
            txtStock.setVisible(false);
        }
    }

    public String getTipoVenta() {
        return tipoVenta;
    }

    public void setTipoVenta(String tipoVenta) {
        this.tipoVenta = tipoVenta;
        lblTipoVenta.setText(tipoVenta);
    }

    private void cmbxProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxProductosActionPerformed
        if (cmbxProductos.getSelectedItem() instanceof ProductoDTO) {
            ProductoDTO productoSeleccionado = (ProductoDTO) cmbxProductos.getSelectedItem();
            Integer cantidadEnStockNullable = productoSeleccionado.getCantidad();
            String tipoEspecificoDelProducto = productoSeleccionado.getTipoEspecifico();

            if (tipoEspecificoDelProducto == null) {
                System.err.println("Advertencia: El ProductoDTO no tiene un tipo específico definido.");
                verificarTipoVenta();
                if (txtStock.isVisible() && cantidadEnStockNullable != null) {
                    txtStock.setText(String.valueOf(cantidadEnStockNullable));
                } else if (txtStock.isVisible()) {
                    txtStock.setText("N/D");
                }
            } else if ("CONTENEDOR".equalsIgnoreCase(tipoEspecificoDelProducto)) {
                jLabel5.setVisible(true);
                txtStock.setVisible(true);
                if (cantidadEnStockNullable != null) {
                    txtStock.setText(String.valueOf(cantidadEnStockNullable.intValue()));
                } else {
                    txtStock.setText("N/D");
                    System.err.println("Advertencia: CONTENEDOR '" + productoSeleccionado.getNombre() + "' tiene stock null en DTO, pero se esperaba un valor.");
                }
            } else if ("LLENADO".equalsIgnoreCase(tipoEspecificoDelProducto)) {
                jLabel5.setVisible(false);
                txtStock.setVisible(false);
                txtStock.setText("");
            } else if ("VARIADO".equalsIgnoreCase(tipoEspecificoDelProducto)) {
                jLabel5.setVisible(true);
                txtStock.setVisible(true);
                if (cantidadEnStockNullable != null) {
                    txtStock.setText(String.valueOf(cantidadEnStockNullable.intValue()));
                } else {
                    txtStock.setText("N/D");
                    System.err.println("Advertencia: Producto VARIADO '" + productoSeleccionado.getNombre() + "' tiene stock null en DTO.");
                }
            } else {
                System.out.println("Nota: ProductoDTO con tipoEspecifico no reconocido: " + tipoEspecificoDelProducto);
                verificarTipoVenta();
                if (txtStock.isVisible() && cantidadEnStockNullable != null) {
                    txtStock.setText(String.valueOf(cantidadEnStockNullable.intValue()));
                } else if (txtStock.isVisible()) {
                    txtStock.setText("N/D");
                }
            }

            txtCantidad.setEditable(true);
            txtCantidad.setText("");
            txtCantidad.requestFocus();

        } else {
            txtCantidad.setText("");
            txtCantidad.setEditable(false);
            verificarTipoVenta();
            if (txtStock != null && txtStock.isVisible()) {
                txtStock.setText("");
            }
        }
    }//GEN-LAST:event_cmbxProductosActionPerformed

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        int key = evt.getKeyChar();
        //Solo permitirá caracteres de números y de '/'.
        boolean nums = key >= 48 && key <= 57;
        if (!nums) {
            evt.consume();
        }
        if (txtCantidad.getText().trim().length() == 8) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantidadKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JComboBox<Object> cmbxProductos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblTipoVenta;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables

}
