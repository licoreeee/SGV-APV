
package vistas;

import dtos.ContenedorDTO;
import dtos.LlenadoDTO;
import dtos.ProductoDTO;
import dtos.UsuarioDTO;
import dtos.VariadoDTO;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.itson.subsistemainventario_sgvapv.ISubsistemaInventarioFacade;
import org.itson.subsistemainventario_sgvapv.SubsistemaInventarioFacade;
import org.itson.subsistemainventario_sgvapv.excepciones.SubsistemaInventarioException;

/**
 *
 * @author Dell
 */
public class PantallaAgregarProductoInventario extends javax.swing.JFrame {

    private UsuarioDTO usuario;
    private JFrame parentFrame; // --- CAMBIO: Renombrado de 'parent' para claridad ---
    private ISubsistemaInventarioFacade subsistemaInventarioFacade;
    private final String PLACEHOLDER_TIPO = "-- Seleccionar Tipo --";
    private final String PLACEHOLDER_CONTENEDOR = "-- Seleccionar Contenedor --";

    /**
     * Creates new form PantallaAgregarProductoInventario
     */
    public PantallaAgregarProductoInventario(JFrame parentFrame, UsuarioDTO usuario) {
        initComponents();
        setVisible(true);
        this.parentFrame = parentFrame;
        this.usuario = usuario;
        this.subsistemaInventarioFacade = new SubsistemaInventarioFacade();
        inicializarComponentesAdicionales();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbxProductos = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        txtStock = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        btnCancelar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        lblContenedor = new javax.swing.JLabel();
        cmbxTipoProductos = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        lblLitros = new javax.swing.JLabel();
        txtLitros = new javax.swing.JTextField();
        lblVolumen = new javax.swing.JLabel();
        txtVolumen = new javax.swing.JTextField();
        cmbxContenedor = new javax.swing.JComboBox();

        cmbxProductos.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        cmbxProductos.setSelectedItem("--Seleccionar");
        cmbxProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxProductosActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(41, 136, 194));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Afacad", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SISTEMA GENERAL DE VENTAS");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo Agua Purificada del Valle.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addContainerGap(110, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(14, 14, 14))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 70));

        jPanel2.setBackground(new java.awt.Color(196, 216, 255));
        jPanel2.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel5.setText("CÃ“DIGO");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(40, 99, 88, 31);

        btnAgregar.setBackground(new java.awt.Color(41, 136, 194));
        btnAgregar.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        btnAgregar.setText("AGREGAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel2.add(btnAgregar);
        btnAgregar.setBounds(419, 363, 160, 38);

        txtStock.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        jPanel2.add(txtStock);
        txtStock.setBounds(134, 233, 172, 33);

        jLabel3.setFont(new java.awt.Font("Afacad", 1, 30)); // NOI18N
        jLabel3.setText("AGREGAR NUEVO PRODUCTO");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(166, 27, 384, 40);

        jLabel6.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel6.setText("PRECIO");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(53, 297, 75, 31);

        txtPrecio.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioKeyTyped(evt);
            }
        });
        jPanel2.add(txtPrecio);
        txtPrecio.setBounds(134, 297, 172, 33);

        btnCancelar.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel2.add(btnCancelar);
        btnCancelar.setBounds(134, 363, 170, 38);

        jLabel7.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel7.setText("NOMBRE");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(40, 166, 88, 31);

        jLabel8.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel8.setText("STOCK");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(59, 233, 69, 31);

        txtCodigo.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        jPanel2.add(txtCodigo);
        txtCodigo.setBounds(134, 99, 172, 33);

        txtNombre.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        jPanel2.add(txtNombre);
        txtNombre.setBounds(134, 166, 241, 33);

        lblContenedor.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        lblContenedor.setText("CONTENEDOR");
        jPanel2.add(lblContenedor);
        lblContenedor.setBounds(331, 233, 145, 31);

        cmbxTipoProductos.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        cmbxTipoProductos.setSelectedItem("--Seleccionar");
        cmbxTipoProductos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbxTipoProductosItemStateChanged(evt);
            }
        });
        jPanel2.add(cmbxTipoProductos);
        cmbxTipoProductos.setBounds(440, 116, 243, 33);

        jLabel10.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel10.setText("TIPO DE PRODUCTO");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(449, 79, 202, 31);

        lblLitros.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        lblLitros.setText("LITROS");
        jPanel2.add(lblLitros);
        lblLitros.setBounds(405, 167, 71, 31);

        txtLitros.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        jPanel2.add(txtLitros);
        txtLitros.setBounds(482, 167, 193, 33);

        lblVolumen.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        lblVolumen.setText("VOLUMEN");
        jPanel2.add(lblVolumen);
        lblVolumen.setBounds(376, 297, 100, 31);

        txtVolumen.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        jPanel2.add(txtVolumen);
        txtVolumen.setBounds(482, 297, 193, 33);

        cmbxContenedor.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        cmbxContenedor.setSelectedItem("--Seleccionar");
        jPanel2.add(cmbxContenedor);
        cmbxContenedor.setBounds(482, 233, 193, 33);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 720, 420));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        String nombre = txtNombre.getText().trim();
        String codigo = txtCodigo.getText().trim();
        String precioStr = txtPrecio.getText().trim();

        Object tipoSeleccionadoObj = cmbxTipoProductos.getSelectedItem();
        String tipoSeleccionado = (tipoSeleccionadoObj != null && !tipoSeleccionadoObj.toString().equals(PLACEHOLDER_TIPO))
                ? tipoSeleccionadoObj.toString() : null;

        if (tipoSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un tipo de producto.", "ValidaciÃ³n Faltante", JOptionPane.WARNING_MESSAGE);
            cmbxTipoProductos.requestFocus();
            return;
        }

        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo 'Nombre' es obligatorio.", "Campo VacÃ­o", JOptionPane.WARNING_MESSAGE);
            txtNombre.requestFocus();
            return;
        }
        if (codigo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo 'CÃ³digo' es obligatorio.", "Campo VacÃ­o", JOptionPane.WARNING_MESSAGE);
            txtCodigo.requestFocus();
            return;
        }
        if (precioStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo 'Precio' es obligatorio.", "Campo VacÃ­o", JOptionPane.WARNING_MESSAGE);
            txtPrecio.requestFocus();
            return;
        }

        Float precio;
        try {
            precio = Float.parseFloat(precioStr);
            if (precio < 0) {
                throw new NumberFormatException("Precio negativo");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Precio: Ingrese un nÃºmero vÃ¡lido no negativo.", "Dato InvÃ¡lido", JOptionPane.WARNING_MESSAGE);
            txtPrecio.requestFocus();
            return;
        }

        Integer stockParaDTO = null;

        if ("CONTENEDOR".equals(tipoSeleccionado) || "VARIADO".equals(tipoSeleccionado)) {
            String stockStr = txtStock.getText().trim();
            if (stockStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "El campo 'Stock' es obligatorio para " + tipoSeleccionado + ".", "Campo VacÃ­o", JOptionPane.WARNING_MESSAGE);
                txtStock.requestFocus();
                return;
            }
            try {
                stockParaDTO = Integer.parseInt(stockStr);
                if (stockParaDTO < 0) {
                    throw new NumberFormatException("Stock negativo");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Stock: Ingrese un nÃºmero entero no negativo.", "Dato InvÃ¡lido", JOptionPane.WARNING_MESSAGE);
                txtStock.requestFocus();
                return;
            }
        }
        
        ProductoDTO productoAAgregar = null;
        Integer litros = null;
        Integer volumen = null;
        String codigoContenedorAsociado = null;

        if ("CONTENEDOR".equals(tipoSeleccionado)) {
            String volumenStr = txtVolumen.getText().trim();
            if (volumenStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "El campo 'Volumen' es obligatorio para Contenedor.", "ValidaciÃ³n", JOptionPane.WARNING_MESSAGE);
                txtVolumen.requestFocus();
                return;
            }
            try {
                volumen = Integer.parseInt(volumenStr);
                if (volumen <= 0) {
                    throw new NumberFormatException("Volumen no positivo");
                }
                productoAAgregar = new ContenedorDTO(volumen, codigo, nombre, precio, stockParaDTO);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Volumen: Ingrese un nÃºmero entero positivo.", "Dato InvÃ¡lido", JOptionPane.WARNING_MESSAGE);
                txtVolumen.requestFocus();
                return;
            }

        } else if ("LLENADO".equals(tipoSeleccionado)) {
            String litrosStr = txtLitros.getText().trim();
            Object contenedorAsociadoObj = cmbxContenedor.getSelectedItem();

            if (litrosStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "El campo 'Litros' es obligatorio para Llenado.", "ValidaciÃ³n", JOptionPane.WARNING_MESSAGE);
                txtLitros.requestFocus();
                return;
            }

            if (contenedorAsociadoObj != null && !(contenedorAsociadoObj.toString().equals(PLACEHOLDER_CONTENEDOR))) {
                if (contenedorAsociadoObj instanceof ProductoDTO) {
                    codigoContenedorAsociado = ((ProductoDTO) contenedorAsociadoObj).getCodigo();
                } else {
                    JOptionPane.showMessageDialog(this, "Error: SelecciÃ³n invÃ¡lida en 'Contenedor Asociado'.", "Error Interno", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            try {
                litros = Integer.parseInt(litrosStr);
                if (litros <= 0) {
                    throw new NumberFormatException("Litros no positivos");
                }
                
                productoAAgregar = new LlenadoDTO(codigo, nombre, precio, litros, codigoContenedorAsociado);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Litros: Ingrese un nÃºmero entero positivo.", "Dato InvÃ¡lido", JOptionPane.WARNING_MESSAGE);
                txtLitros.requestFocus();
                return;
            }

        } else if ("VARIADO".equals(tipoSeleccionado)) {
            productoAAgregar = new VariadoDTO(codigo, nombre, precio, stockParaDTO);
        }

        if (productoAAgregar == null) {
            JOptionPane.showMessageDialog(this, "Error: No se pudo determinar el tipo de producto para agregar.", "Error Interno", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            subsistemaInventarioFacade.agregarProducto(productoAAgregar);
            JOptionPane.showMessageDialog(this, "Producto '" + nombre + "' (" + tipoSeleccionado + ") registrado exitosamente.", "Registro Completado", JOptionPane.INFORMATION_MESSAGE);
            limpiarFormularioCompleto();
            cargarContenedoresExistentes();
        } catch (SubsistemaInventarioException e) {
            System.err.println("Error al agregar producto: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "No se pudo agregar el producto: " + e.getMessage(), "Error al Guardar", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            System.err.println("Error inesperado: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "OcurriÃ³ un error inesperado. Revise la consola.", "Error CrÃ­tico", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void txtPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyTyped
        char c = evt.getKeyChar();
        String currentText = txtPrecio.getText();

        if (Character.isDigit(c)) {
            return;
        }

        if (c == '.' && !currentText.contains(".")) {
            return;
        }

        if (c == KeyEvent.VK_BACK_SPACE) {
            return;
        }

        evt.consume();
    }

    private void txtStockKeyTyped(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();

        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioKeyTyped

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
        PantallaGestionarInventario pantallaInventario = new PantallaGestionarInventario(this, usuario);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cmbxProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxProductosActionPerformed

    }//GEN-LAST:event_cmbxProductosActionPerformed

    private void cmbxTipoProductosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbxTipoProductosItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            configurarVisibilidadCamposTipo();
        }
    }//GEN-LAST:event_cmbxTipoProductosItemStateChanged

    private void inicializarComponentesAdicionales() {
        this.setTitle("SGVAPV - Agregar Nuevo Producto");
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        txtNombre.setEditable(true);
        txtCodigo.setEditable(true);
        txtStock.setEditable(true);
        txtPrecio.setEditable(true);

        cargarTiposDeProducto();
        cargarContenedoresExistentes();
        configurarVisibilidadCamposTipo();

        cmbxTipoProductos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbxTipoProductosItemStateChanged(evt);
            }
        });

        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                validarInputNumericoDecimal(evt, txtPrecio);
            }
        });
        txtStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                validarInputNumericoEntero(evt);
            }
        });
        txtLitros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                validarInputNumericoEntero(evt);
            }
        });
        txtVolumen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                validarInputNumericoEntero(evt);
            }
        });

        this.pack();
        this.setLocationRelativeTo(parentFrame);
    }

    private void cargarContenedoresExistentes() {
        try {
            List<ProductoDTO> contenedores = subsistemaInventarioFacade.obtenerProductosPorTipo(Arrays.asList("CONTENEDOR"));
            DefaultComboBoxModel<Object> model = new DefaultComboBoxModel<>();
            model.addElement(PLACEHOLDER_CONTENEDOR);

            if (contenedores != null && !contenedores.isEmpty()) {
                for (ProductoDTO prod : contenedores) {
                    model.addElement(prod);
                }
            } else {
                System.out.println("No se encontraron productos de tipo CONTENEDOR.");
            }
            cmbxContenedor.setModel(model);
        } catch (Exception e) {
            System.err.println("Error al cargar contenedores existentes: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error al cargar lista de contenedores.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarTiposDeProducto() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement(PLACEHOLDER_TIPO);
        model.addElement("CONTENEDOR");
        model.addElement("LLENADO");
        model.addElement("VARIADO");
        cmbxTipoProductos.setModel(model);
    }

    private void configurarVisibilidadCamposTipo() {
        String tipoSeleccionado = cmbxTipoProductos.getSelectedItem() != null ? cmbxTipoProductos.getSelectedItem().toString() : "";
        System.out.println("Configurando visibilidad para tipo: " + tipoSeleccionado);

        boolean esLlenado = "LLENADO".equals(tipoSeleccionado);
        boolean esContenedor = "CONTENEDOR".equals(tipoSeleccionado);
        boolean esVariado = "VARIADO".equals(tipoSeleccionado);
        boolean mostrarStock = esContenedor || esVariado;
        jLabel8.setVisible(mostrarStock);
        txtStock.setVisible(mostrarStock);
        txtStock.setEditable(mostrarStock);
        if (!mostrarStock) {
            txtStock.setText("");
        }

        lblLitros.setVisible(esLlenado);
        txtLitros.setVisible(esLlenado);
        txtLitros.setEditable(esLlenado);
        if (!esLlenado) {
            txtLitros.setText("");
        }

        lblContenedor.setVisible(esLlenado);
        cmbxContenedor.setVisible(esLlenado);
        if (!esLlenado && cmbxContenedor.getItemCount() > 0) {
            cmbxContenedor.setSelectedIndex(0);
        }

        lblVolumen.setVisible(esContenedor);
        txtVolumen.setVisible(esContenedor);
        txtVolumen.setEditable(esContenedor);
        if (!esContenedor) {
            txtVolumen.setText("");
        }
    }

    private void limpiarFormularioCompleto() {
        txtNombre.setText("");
        txtCodigo.setText("");
        txtStock.setText("");
        txtPrecio.setText("");
        txtLitros.setText("");
        txtVolumen.setText("");
        if (cmbxTipoProductos.getItemCount() > 0) {
            cmbxTipoProductos.setSelectedIndex(0);
        }
        if (cmbxContenedor.getItemCount() > 0) {
            cmbxContenedor.setSelectedIndex(0);
        }
        txtNombre.requestFocus();
    }

    private void validarInputNumericoDecimal(java.awt.event.KeyEvent evt, javax.swing.JTextField campo) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.' && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_DELETE) {
            evt.consume();
        }
        if (c == '.' && campo.getText().contains(".")) {
            evt.consume();
        }
    }

    private void validarInputNumericoEntero(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JComboBox cmbxContenedor;
    private javax.swing.JComboBox<Object> cmbxProductos;
    private javax.swing.JComboBox cmbxTipoProductos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblContenedor;
    private javax.swing.JLabel lblLitros;
    private javax.swing.JLabel lblVolumen;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtLitros;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    private javax.swing.JTextField txtVolumen;
    // End of variables declaration//GEN-END:variables
}
