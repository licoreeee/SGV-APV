package vistas;

import dtos.ContenedorDTO;
import dtos.LlenadoDTO;
import dtos.ProductoDTO;
import dtos.UsuarioDTO;
import dtos.VariadoDTO;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.itson.subsistemainventario_sgvapv.ISubsistemaInventarioFacade;
import org.itson.subsistemainventario_sgvapv.SubsistemaInventarioFacade;
import org.itson.subsistemainventario_sgvapv.excepciones.SubsistemaInventarioException;

/**
 *
 * @author Dell
 */
public class PantallaEliminarProductoInventario extends javax.swing.JFrame {

    private UsuarioDTO usuario;
    private JFrame parentFrame;
    private ISubsistemaInventarioFacade subsistemaInventarioFacade;
    private final String PLACEHOLDER_TIPO = "-- Seleccionar Tipo --";
    private final String PLACEHOLDER_CONTENEDOR = "-- Seleccionar Contenedor --";
    private final String PLACEHOLDER_PRODUCTO_EDITAR = "-- Seleccione Producto a Eliminar --";
    private ProductoDTO productoSeleccionadoParaAccion;
    private static final Logger logger = Logger.getLogger(PantallaEliminarProductoInventario.class.getName());

    /**
     * Creates new form PantallaAgregarProductoInventario
     */
    public PantallaEliminarProductoInventario(JFrame parentFrame, UsuarioDTO usuario) {
        initComponents();
        setVisible(true);
        this.parentFrame = parentFrame;
        this.usuario = usuario;
        this.subsistemaInventarioFacade = new SubsistemaInventarioFacade();
        inicializarComponentesAdicionales();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbxProductos = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        btnEliminar = new javax.swing.JButton();
        txtStock = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        btnCancelar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblContenedor = new javax.swing.JLabel();
        cmbxProductos2 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        lblLitros = new javax.swing.JLabel();
        txtLitros = new javax.swing.JTextField();
        lblVolumen = new javax.swing.JLabel();
        txtVolumen = new javax.swing.JTextField();
        cmbxContenedor = new javax.swing.JComboBox();
        lblCodigo = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        cmbxProductos.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        cmbxProductos.setSelectedItem("--Seleccionar");
        cmbxProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxProductosActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(196, 216, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnEliminar.setBackground(new java.awt.Color(41, 136, 194));
        btnEliminar.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 420, 169, -1));

        txtStock.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        txtStock.setEnabled(false);
        jPanel2.add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 298, 200, -1));

        jLabel3.setFont(new java.awt.Font("Afacad", 1, 30)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ELIMINAR PRODUCTO");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 88, 350, -1));

        jLabel6.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel6.setText("PRECIO");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 298, -1, -1));

        txtPrecio.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        txtPrecio.setEnabled(false);
        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioKeyTyped(evt);
            }
        });
        jPanel2.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 298, 200, -1));

        btnCancelar.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel2.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 420, 172, -1));

        jLabel7.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel7.setText("NOMBRE");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 248, 103, -1));

        jLabel8.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel8.setText("STOCK");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 298, 82, -1));

        txtNombre.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        txtNombre.setEnabled(false);
        jPanel2.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 248, 200, -1));

        lblContenedor.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        lblContenedor.setText("CONTENEDOR");
        jPanel2.add(lblContenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(81, 348, 166, -1));

        cmbxProductos2.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        cmbxProductos2.setSelectedItem("--Seleccionar");
        cmbxProductos2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbxProductos2ItemStateChanged(evt);
            }
        });
        cmbxProductos2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxProductos2ActionPerformed(evt);
            }
        });
        jPanel2.add(cmbxProductos2, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 145, 360, -1));

        jLabel10.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        jLabel10.setText("PRODUCTO");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 145, 134, -1));

        lblLitros.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        lblLitros.setText("LITROS");
        jPanel2.add(lblLitros, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 198, 84, -1));

        txtLitros.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        txtLitros.setEnabled(false);
        txtLitros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLitrosActionPerformed(evt);
            }
        });
        jPanel2.add(txtLitros, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 198, 200, -1));

        lblVolumen.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        lblVolumen.setText("VOLUMEN");
        jPanel2.add(lblVolumen, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 248, -1, -1));

        txtVolumen.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        txtVolumen.setEnabled(false);
        jPanel2.add(txtVolumen, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 248, 200, -1));

        cmbxContenedor.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        cmbxContenedor.setSelectedItem("--Seleccionar");
        cmbxContenedor.setEnabled(false);
        jPanel2.add(cmbxContenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(265, 348, 360, -1));

        lblCodigo.setFont(new java.awt.Font("Afacad", 1, 23)); // NOI18N
        lblCodigo.setText("CÃ“DIGO");
        jPanel2.add(lblCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 198, 93, -1));

        txtCodigo.setFont(new java.awt.Font("Afacad", 1, 20)); // NOI18N
        txtCodigo.setEnabled(false);
        jPanel2.add(txtCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 198, 200, -1));

        jPanel1.setBackground(new java.awt.Color(41, 136, 194));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Afacad", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SISTEMA GENERAL DE VENTAS");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo Agua Purificada del Valle.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(14, 14, 14))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 70));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 480));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (this.productoSeleccionadoParaAccion == null || this.productoSeleccionadoParaAccion.getCodigo() == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un producto de la lista para eliminar.", "Campo VacÃ­o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "Â¿EstÃ¡ seguro de que desea eliminar el producto?",
                "Confirmar EliminaciÃ³n",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                logger.log(Level.INFO, "[UI ELIMINAR] Intentando eliminar producto con cÃ³digo: " + productoSeleccionadoParaAccion.getCodigo());
                subsistemaInventarioFacade.eliminarProducto(productoSeleccionadoParaAccion.getCodigo()); // Usa el cÃ³digo para eliminar
                JOptionPane.showMessageDialog(this, "El producto ha sido eliminado exitosamente.", "EliminaciÃ³n Exitosa", JOptionPane.INFORMATION_MESSAGE);

                cargarListaDeProductosEn_cmbxProductos2(); // Recargar la lista
                limpiarYDeshabilitarFormularioDetalles();

            } catch (SubsistemaInventarioException e) {
                logger.log(Level.SEVERE, "[UI ERROR ELIMINAR] SubsistemaInventarioException al eliminar", e);
                JOptionPane.showMessageDialog(this, "Error al eliminar el producto, intÃ©ntelo de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                logger.log(Level.SEVERE, "[UI ERROR ELIMINAR] Exception general al eliminar", e);
                JOptionPane.showMessageDialog(this, "Error al eliminar, intÃ©ntelo de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyTyped
        char c = evt.getKeyChar();
        String currentText = txtPrecio.getText();

        if (Character.isDigit(c)) {
            return;
        }

        if (c == '.' && !currentText.contains(".")) {
            return;
        }

        if (c == KeyEvent.VK_BACK_SPACE) {
            return;
        }

        evt.consume();
    }

    private void txtStockKeyTyped(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();

        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioKeyTyped

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
        PantallaGestionarInventario pantallaInventario = new PantallaGestionarInventario(this, usuario);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cmbxProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxProductosActionPerformed

    }//GEN-LAST:event_cmbxProductosActionPerformed

    private void cmbxProductos2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbxProductos2ItemStateChanged

    }//GEN-LAST:event_cmbxProductos2ItemStateChanged

    private void txtLitrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLitrosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLitrosActionPerformed

    private void cmbxProductos2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxProductos2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbxProductos2ActionPerformed

    private void inicializarComponentesAdicionales() {
        this.setTitle("SGVAPV - Eliminar Producto");
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        logger.log(Level.INFO, "[UI ELIMINAR] PantallaEliminar: Inicializando componentes adicionales...");

        cargarListaDeProductosEn_cmbxProductos2();
        cargarContenedoresExistentes();

        cmbxProductos2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbxProductos2_ItemStateChanged(evt);
            }
        });

        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                validarInputNumericoDecimal(evt, txtPrecio);
            }
        });
        txtStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                validarInputNumericoEntero(evt);
            }
        });
        txtLitros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                validarInputNumericoEntero(evt);
            }
        });
        txtVolumen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                validarInputNumericoEntero(evt);
            }
        });

        limpiarYDeshabilitarFormularioDetalles();
        logger.log(Level.INFO, "[UI ELIMINAR] PantallaEliminar: Componentes adicionales inicializados.");
    }

    private void cargarListaDeProductosEn_cmbxProductos2() {
        System.out.println("[UI] PantallaEditar: Intentando cargar productos en cmbxProductos2...");
        try {
            List<ProductoDTO> listaProductos = subsistemaInventarioFacade.obtenerTodosLosProductos();

            System.out.println("[UI] PantallaEditar: Fachada devolviÃ³ listaProductos. Es null? " + (listaProductos == null));
            if (listaProductos != null) {
                System.out.println("[UI] PantallaEditar: NÃºmero de productos DTO recibidos: " + listaProductos.size());
                if (!listaProductos.isEmpty()) {
                    for (int i = 0; i < Math.min(3, listaProductos.size()); i++) {
                        ProductoDTO p = listaProductos.get(i);
                        System.out.println("[UI] PantallaEditar: DTO[" + i + "]: " + p.toString() + " (ID: " + p.getId() + ")");
                    }
                }
            }

            DefaultComboBoxModel<Object> model = new DefaultComboBoxModel<>();
            model.addElement(PLACEHOLDER_PRODUCTO_EDITAR);

            if (listaProductos != null && !listaProductos.isEmpty()) {
                for (ProductoDTO producto : listaProductos) {
                    model.addElement(producto);
                }
            }
            cmbxProductos2.setModel(model);
            System.out.println("[UI] PantallaEditar: Modelo asignado a cmbxProductos2.");

        } catch (SubsistemaInventarioException e) {
            System.err.println("[UI ERROR] PantallaEditar: SubsistemaInventarioException al cargar lista: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar la lista de productos: " + e.getMessage(), "Error de Carga", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            System.err.println("[UI ERROR] PantallaEditar: Exception general al cargar lista: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inesperado al cargar productos.", "Error CrÃ­tico", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cmbxProductos2_ItemStateChanged(java.awt.event.ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Object itemSeleccionado = cmbxProductos2.getSelectedItem();

            if (itemSeleccionado instanceof ProductoDTO) {
                ProductoDTO productoResumen = (ProductoDTO) itemSeleccionado;
                if (productoResumen.getId() == null) {
                    JOptionPane.showMessageDialog(this, "Error: Producto seleccionado sin ID.", "Error de Datos", JOptionPane.ERROR_MESSAGE);
                    limpiarYDeshabilitarFormularioDetalles();
                    return;
                }
                try {
                    this.productoSeleccionadoParaAccion = subsistemaInventarioFacade.obtenerProductoParaEdicion(productoResumen.getId());
                    if (this.productoSeleccionadoParaAccion != null) {
                        cargarDatosProductoEnFormulario(this.productoSeleccionadoParaAccion);
                        habilitarFormularioDetalles(true);
                        txtCodigo.setEditable(false);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudieron cargar detalles del producto.", "Error", JOptionPane.ERROR_MESSAGE);
                        limpiarYDeshabilitarFormularioDetalles();
                    }
                } catch (SubsistemaInventarioException e) {
                    JOptionPane.showMessageDialog(this, "Error al cargar detalles del producto: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    limpiarYDeshabilitarFormularioDetalles();
                }
            } else {
                this.productoSeleccionadoParaAccion = null;
                limpiarYDeshabilitarFormularioDetalles();
            }
        }
    }

    private void cargarDatosProductoEnFormulario(ProductoDTO producto) {
        if (producto == null) {
            return;
        }
        logger.log(Level.INFO, "[UI DEBUG ELIMINAR] cargarDatos...ParaVisualizacion para: " + producto.getCodigo());

        txtNombre.setText(producto.getNombre());
        txtCodigo.setText(producto.getCodigo());
        txtPrecio.setText(String.valueOf(producto.getPrecio()));

        txtStock.setText("");
        txtLitros.setText("");
        txtVolumen.setText("");
        if (cmbxContenedor.getItemCount() > 0) {
            cmbxContenedor.setSelectedIndex(0);
        }

        String tipoDetectado = "";

        if (producto instanceof ContenedorDTO) {
            tipoDetectado = "CONTENEDOR";
            ContenedorDTO cDto = (ContenedorDTO) producto;
            txtStock.setText(cDto.getCantidad() != null ? String.valueOf(cDto.getCantidad()) : "0");
            txtVolumen.setText(String.valueOf(cDto.getVolumen()));
        } else if (producto instanceof LlenadoDTO) {
            tipoDetectado = "LLENADO";
            LlenadoDTO lDto = (LlenadoDTO) producto;
            txtLitros.setText(String.valueOf(lDto.getLitros()));
            if (lDto.getCodigoContenedorAsociado() != null && !lDto.getCodigoContenedorAsociado().isEmpty()) {
                for (int i = 0; i < cmbxContenedor.getModel().getSize(); i++) {
                    Object item = cmbxContenedor.getModel().getElementAt(i);
                    if (item instanceof ProductoDTO && ((ProductoDTO) item).getCodigo().equals(lDto.getCodigoContenedorAsociado())) {
                        cmbxContenedor.setSelectedIndex(i);
                        break;
                    }
                }
            }
        } else if (producto instanceof VariadoDTO) {
            tipoDetectado = "VARIADO";
            VariadoDTO vDto = (VariadoDTO) producto;
            txtStock.setText(vDto.getCantidad() != null ? String.valueOf(vDto.getCantidad()) : "0");
        } else {
            tipoDetectado = "PRODUCTO_BASE";
            if (producto.getCantidad() != null) {
                txtStock.setText(String.valueOf(producto.getCantidad()));
            }
        }
        configurarVisibilidadCamposTipo(tipoDetectado);
    }

    private void habilitarAccionEliminar(boolean habilitarBoton) {
        txtNombre.setEditable(false);
        txtCodigo.setEditable(false);
        txtPrecio.setEditable(false);
        txtStock.setEditable(false);
        txtLitros.setEditable(false);
        txtVolumen.setEditable(false);
        cmbxContenedor.setEnabled(false);

        btnEliminar.setEnabled(habilitarBoton);
    }

    private void limpiarYDeshabilitarFormularioDetalles() {
        logger.log(Level.INFO, "[UI DEBUG ELIMINAR] Limpiando y deshabilitando todos los campos.");
        txtNombre.setText("");
        txtCodigo.setText("");
        txtStock.setText("");
        txtPrecio.setText("");
        txtLitros.setText("");
        txtVolumen.setText("");

        if (cmbxProductos2.getItemCount() > 0) {
            cmbxProductos2.setSelectedIndex(0);
        }
        configurarVisibilidadCamposTipo(PLACEHOLDER_PRODUCTO_EDITAR);

        if (cmbxContenedor.getItemCount() > 0) {
            cmbxContenedor.setSelectedIndex(0);
        }
        habilitarAccionEliminar(false);
    }

    private void habilitarFormularioDetalles(boolean habilitar) {
        txtNombre.setEditable(habilitar);
        txtCodigo.setEditable(false);
        txtPrecio.setEditable(habilitar);
        cmbxProductos2.setEnabled(true);

        txtStock.setEditable(habilitar && txtStock.isVisible());
        txtLitros.setEditable(habilitar && txtLitros.isVisible());
        txtVolumen.setEditable(habilitar && txtVolumen.isVisible());
        cmbxContenedor.setEnabled(habilitar && cmbxContenedor.isVisible());
        btnEliminar.setEnabled(habilitar);
    }

    private void cargarContenedoresExistentes() {
        try {
            List<ProductoDTO> contenedores = subsistemaInventarioFacade.obtenerProductosPorTipo(Arrays.asList("CONTENEDOR"));
            DefaultComboBoxModel<Object> model = new DefaultComboBoxModel<>();
            model.addElement(PLACEHOLDER_CONTENEDOR);

            if (contenedores != null && !contenedores.isEmpty()) {
                for (ProductoDTO prod : contenedores) {
                    model.addElement(prod);
                }
            }
            cmbxContenedor.setModel(model);
        } catch (Exception e) {
            System.err.println("Error inesperado al cargar contenedores existentes: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inesperado al cargar lista de contenedores.", "Error CrÃ­tico", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void cargarTiposDeProducto() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement(PLACEHOLDER_TIPO);
        model.addElement("CONTENEDOR");
        model.addElement("LLENADO");
        model.addElement("VARIADO");
        cmbxProductos2.setModel(model);
    }

    private void configurarVisibilidadCamposTipo(String tipoProductoDeterminado) {
        logger.log(Level.INFO, "[UI DEBUG ELIMINAR] configurarVisibilidadCamposTipo para tipo: '" + tipoProductoDeterminado + "'");

        boolean esLlenado = "LLENADO".equals(tipoProductoDeterminado);
        boolean esContenedor = "CONTENEDOR".equals(tipoProductoDeterminado);
        boolean esVariadoOBase = "VARIADO".equals(tipoProductoDeterminado) || "PRODUCTO_BASE".equals(tipoProductoDeterminado);

        boolean mostrarStock = esContenedor || esVariadoOBase;
        jLabel8.setVisible(mostrarStock);
        txtStock.setVisible(mostrarStock);
        if (!mostrarStock) {
            txtStock.setText("");
        }

        lblLitros.setVisible(esLlenado);
        txtLitros.setVisible(esLlenado);
        if (!esLlenado) {
            txtLitros.setText("");
        }

        lblContenedor.setVisible(esLlenado);
        cmbxContenedor.setVisible(esLlenado);
        if (!esLlenado && cmbxContenedor.getItemCount() > 0) {
            cmbxContenedor.setSelectedItem(PLACEHOLDER_CONTENEDOR);
        }

        lblVolumen.setVisible(esContenedor);
        txtVolumen.setVisible(esContenedor);
        if (!esContenedor) {
            txtVolumen.setText("");
        }
    }

    private void validarInputNumericoDecimal(java.awt.event.KeyEvent evt, javax.swing.JTextField campo) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.' && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_DELETE) {
            evt.consume();
        }
        if (c == '.' && campo.getText().contains(".")) {
            evt.consume();
        }
    }

    private void validarInputNumericoEntero(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_DELETE) {
            evt.consume();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox cmbxContenedor;
    private javax.swing.JComboBox<Object> cmbxProductos;
    private javax.swing.JComboBox cmbxProductos2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblContenedor;
    private javax.swing.JLabel lblLitros;
    private javax.swing.JLabel lblVolumen;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtLitros;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    private javax.swing.JTextField txtVolumen;
    // End of variables declaration//GEN-END:variables
}
